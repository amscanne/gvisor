// automatically generated by stateify.

package devpts

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *lineDiscipline) beforeSave() {}
func (x *lineDiscipline) save(m state.Map) {
	x.beforeSave()
	if !state.IsZeroValue(&x.masterWaiter) {
		m.Failf("masterWaiter is %#v, expected zero", &x.masterWaiter)
	}
	if !state.IsZeroValue(&x.slaveWaiter) {
		m.Failf("slaveWaiter is %#v, expected zero", &x.slaveWaiter)
	}
	m.Save("size", &x.size)
	m.Save("inQueue", &x.inQueue)
	m.Save("outQueue", &x.outQueue)
	m.Save("termios", &x.termios)
	m.Save("column", &x.column)
}

func (x *lineDiscipline) afterLoad() {}
func (x *lineDiscipline) load(m state.Map) {
	m.Load("size", &x.size)
	m.Load("inQueue", &x.inQueue)
	m.Load("outQueue", &x.outQueue)
	m.Load("termios", &x.termios)
	m.Load("column", &x.column)
}

func (x *outputQueueTransformer) beforeSave() {}
func (x *outputQueueTransformer) save(m state.Map) {
	x.beforeSave()
}

func (x *outputQueueTransformer) afterLoad() {}
func (x *outputQueueTransformer) load(m state.Map) {
}

func (x *inputQueueTransformer) beforeSave() {}
func (x *inputQueueTransformer) save(m state.Map) {
	x.beforeSave()
}

func (x *inputQueueTransformer) afterLoad() {}
func (x *inputQueueTransformer) load(m state.Map) {
}

func (x *queue) beforeSave() {}
func (x *queue) save(m state.Map) {
	x.beforeSave()
	m.Save("readBuf", &x.readBuf)
	m.Save("waitBuf", &x.waitBuf)
	m.Save("waitBufLen", &x.waitBufLen)
	m.Save("readable", &x.readable)
	m.Save("transformer", &x.transformer)
}

func (x *queue) afterLoad() {}
func (x *queue) load(m state.Map) {
	m.Load("readBuf", &x.readBuf)
	m.Load("waitBuf", &x.waitBuf)
	m.Load("waitBufLen", &x.waitBufLen)
	m.Load("readable", &x.readable)
	m.Load("transformer", &x.transformer)
}

func (x *Terminal) beforeSave() {}
func (x *Terminal) save(m state.Map) {
	x.beforeSave()
	m.Save("n", &x.n)
	m.Save("ld", &x.ld)
	m.Save("masterKTTY", &x.masterKTTY)
	m.Save("slaveKTTY", &x.slaveKTTY)
}

func (x *Terminal) afterLoad() {}
func (x *Terminal) load(m state.Map) {
	m.Load("n", &x.n)
	m.Load("ld", &x.ld)
	m.Load("masterKTTY", &x.masterKTTY)
	m.Load("slaveKTTY", &x.slaveKTTY)
}

func init() {
	state.Register("pkg/sentry/fsimpl/devpts.lineDiscipline", (*lineDiscipline)(nil), state.Fns{Save: (*lineDiscipline).save, Load: (*lineDiscipline).load})
	state.Register("pkg/sentry/fsimpl/devpts.outputQueueTransformer", (*outputQueueTransformer)(nil), state.Fns{Save: (*outputQueueTransformer).save, Load: (*outputQueueTransformer).load})
	state.Register("pkg/sentry/fsimpl/devpts.inputQueueTransformer", (*inputQueueTransformer)(nil), state.Fns{Save: (*inputQueueTransformer).save, Load: (*inputQueueTransformer).load})
	state.Register("pkg/sentry/fsimpl/devpts.queue", (*queue)(nil), state.Fns{Save: (*queue).save, Load: (*queue).load})
	state.Register("pkg/sentry/fsimpl/devpts.Terminal", (*Terminal)(nil), state.Fns{Save: (*Terminal).save, Load: (*Terminal).load})
}
