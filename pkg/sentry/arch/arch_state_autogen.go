// automatically generated by stateify.

// +build 386 amd64 arm64

package arch

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *MmapLayout) beforeSave() {}
func (x *MmapLayout) save(m state.Map) {
	x.beforeSave()
	m.Save("MinAddr", &x.MinAddr)
	m.Save("MaxAddr", &x.MaxAddr)
	m.Save("BottomUpBase", &x.BottomUpBase)
	m.Save("TopDownBase", &x.TopDownBase)
	m.Save("DefaultDirection", &x.DefaultDirection)
	m.Save("MaxStackRand", &x.MaxStackRand)
}

func (x *MmapLayout) afterLoad() {}
func (x *MmapLayout) load(m state.Map) {
	m.Load("MinAddr", &x.MinAddr)
	m.Load("MaxAddr", &x.MaxAddr)
	m.Load("BottomUpBase", &x.BottomUpBase)
	m.Load("TopDownBase", &x.TopDownBase)
	m.Load("DefaultDirection", &x.DefaultDirection)
	m.Load("MaxStackRand", &x.MaxStackRand)
}

func (x *AuxEntry) beforeSave() {}
func (x *AuxEntry) save(m state.Map) {
	x.beforeSave()
	m.Save("Key", &x.Key)
	m.Save("Value", &x.Value)
}

func (x *AuxEntry) afterLoad() {}
func (x *AuxEntry) load(m state.Map) {
	m.Load("Key", &x.Key)
	m.Load("Value", &x.Value)
}

func (x *SignalAct) beforeSave() {}
func (x *SignalAct) save(m state.Map) {
	x.beforeSave()
	m.Save("Handler", &x.Handler)
	m.Save("Flags", &x.Flags)
	m.Save("Restorer", &x.Restorer)
	m.Save("Mask", &x.Mask)
}

func (x *SignalAct) afterLoad() {}
func (x *SignalAct) load(m state.Map) {
	m.Load("Handler", &x.Handler)
	m.Load("Flags", &x.Flags)
	m.Load("Restorer", &x.Restorer)
	m.Load("Mask", &x.Mask)
}

func (x *SignalStack) beforeSave() {}
func (x *SignalStack) save(m state.Map) {
	x.beforeSave()
	m.Save("Addr", &x.Addr)
	m.Save("Flags", &x.Flags)
	m.Save("Size", &x.Size)
}

func (x *SignalStack) afterLoad() {}
func (x *SignalStack) load(m state.Map) {
	m.Load("Addr", &x.Addr)
	m.Load("Flags", &x.Flags)
	m.Load("Size", &x.Size)
}

func (x *SignalInfo) beforeSave() {}
func (x *SignalInfo) save(m state.Map) {
	x.beforeSave()
	m.Save("Signo", &x.Signo)
	m.Save("Errno", &x.Errno)
	m.Save("Code", &x.Code)
	m.Save("Fields", &x.Fields)
}

func (x *SignalInfo) afterLoad() {}
func (x *SignalInfo) load(m state.Map) {
	m.Load("Signo", &x.Signo)
	m.Load("Errno", &x.Errno)
	m.Load("Code", &x.Code)
	m.Load("Fields", &x.Fields)
}

func init() {
	state.Register("pkg/sentry/arch.MmapLayout", (*MmapLayout)(nil), state.Fns{Save: (*MmapLayout).save, Load: (*MmapLayout).load})
	state.Register("pkg/sentry/arch.AuxEntry", (*AuxEntry)(nil), state.Fns{Save: (*AuxEntry).save, Load: (*AuxEntry).load})
	state.Register("pkg/sentry/arch.SignalAct", (*SignalAct)(nil), state.Fns{Save: (*SignalAct).save, Load: (*SignalAct).load})
	state.Register("pkg/sentry/arch.SignalStack", (*SignalStack)(nil), state.Fns{Save: (*SignalStack).save, Load: (*SignalStack).load})
	state.Register("pkg/sentry/arch.SignalInfo", (*SignalInfo)(nil), state.Fns{Save: (*SignalInfo).save, Load: (*SignalInfo).load})
}
